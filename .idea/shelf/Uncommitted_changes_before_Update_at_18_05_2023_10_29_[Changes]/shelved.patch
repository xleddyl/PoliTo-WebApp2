Index: server/src/main/kotlin/it/polito/wa2/server/ticketing/messages/MessageController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.ticketing.messages\r\n\r\nimport it.polito.wa2.server.NotValidException\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.web.bind.annotation.*\r\n\r\n@RestController\r\nclass MessageController(\r\n    private val messageService: MessageService\r\n) {\r\n    @GetMapping(\"API/tickets/{ticketId}/messages\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun getAllForTicket(@PathVariable ticketId: Long): List<MessageDTO> {\r\n        return messageService.getAllForTicket(ticketId).map { it.toDTO() }\r\n    }\r\n\r\n    @GetMapping(\"API/tickets/{ticketId}/messages/{messageId}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun getMessageByIdForTicket(@PathVariable ticketId: Long, @PathVariable messageId: Long): MessageDTO {\r\n        return messageService.getById(ticketId, messageId).toDTO()\r\n    }\r\n\r\n    @PostMapping(\"API/tickets/{ticketId}/messages\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    fun addMessageForTicket(@RequestBody messageDTO: MessageDTO?, @PathVariable ticketId: Long): MessageDTO {\r\n        if (messageDTO == null) throw NotValidException(\"Message was malformed\")\r\n        if (messageDTO.ticket != ticketId) throw NotValidException(\"Message id and path id doesn't match\")\r\n        return messageService.addMessage(messageDTO, ticketId).toDTO()\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/kotlin/it/polito/wa2/server/ticketing/messages/MessageController.kt b/server/src/main/kotlin/it/polito/wa2/server/ticketing/messages/MessageController.kt
--- a/server/src/main/kotlin/it/polito/wa2/server/ticketing/messages/MessageController.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/main/kotlin/it/polito/wa2/server/ticketing/messages/MessageController.kt	(date 1684398366390)
@@ -8,19 +8,19 @@
 class MessageController(
     private val messageService: MessageService
 ) {
-    @GetMapping("API/tickets/{ticketId}/messages")
+    @GetMapping("/tickets/{ticketId}/messages")
     @ResponseStatus(HttpStatus.OK)
     fun getAllForTicket(@PathVariable ticketId: Long): List<MessageDTO> {
         return messageService.getAllForTicket(ticketId).map { it.toDTO() }
     }
 
-    @GetMapping("API/tickets/{ticketId}/messages/{messageId}")
+    @GetMapping("/tickets/{ticketId}/messages/{messageId}")
     @ResponseStatus(HttpStatus.OK)
     fun getMessageByIdForTicket(@PathVariable ticketId: Long, @PathVariable messageId: Long): MessageDTO {
         return messageService.getById(ticketId, messageId).toDTO()
     }
 
-    @PostMapping("API/tickets/{ticketId}/messages")
+    @PostMapping("/tickets/{ticketId}/messages")
     @ResponseStatus(HttpStatus.CREATED)
     fun addMessageForTicket(@RequestBody messageDTO: MessageDTO?, @PathVariable ticketId: Long): MessageDTO {
         if (messageDTO == null) throw NotValidException("Message was malformed")
Index: server/src/main/kotlin/it/polito/wa2/server/profiles/ProfileController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.profiles\r\n\r\nimport it.polito.wa2.server.NotFoundException\r\nimport it.polito.wa2.server.NotValidException\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.web.bind.annotation.*\r\n\r\n@RestController\r\nclass ProfileController(private val profileService: ProfileService) {\r\n\r\n    @GetMapping(\"/API/profiles/{email}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun getByEmail(@PathVariable email: String): ProfileDTO? {\r\n        return profileService.getByEmail(email)\r\n    }\r\n\r\n    @PostMapping(\"/API/profiles\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    fun addProfile(@RequestBody profileDTO: ProfileDTO?): ProfileDTO {\r\n        if (profileDTO == null) throw NotValidException(\"Profile was malformed\")\r\n        return profileService.addProfile(profileDTO)\r\n    }\r\n\r\n    @PutMapping(\"/API/profiles/{email}\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    fun editProfile(@RequestBody profileDTO: ProfileDTO?, @PathVariable email: String): ProfileDTO {\r\n        if (profileDTO == null) throw NotFoundException(\"Profile not found\")\r\n        if (profileDTO.email != email) throw NotValidException(\"Profile id and path id doesn't match\")\r\n\r\n        return profileService.editProfile(profileDTO, email)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/kotlin/it/polito/wa2/server/profiles/ProfileController.kt b/server/src/main/kotlin/it/polito/wa2/server/profiles/ProfileController.kt
--- a/server/src/main/kotlin/it/polito/wa2/server/profiles/ProfileController.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/main/kotlin/it/polito/wa2/server/profiles/ProfileController.kt	(date 1684398366426)
@@ -8,20 +8,20 @@
 @RestController
 class ProfileController(private val profileService: ProfileService) {
 
-    @GetMapping("/API/profiles/{email}")
+    @GetMapping("/profiles/{email}")
     @ResponseStatus(HttpStatus.OK)
     fun getByEmail(@PathVariable email: String): ProfileDTO? {
         return profileService.getByEmail(email)
     }
 
-    @PostMapping("/API/profiles")
+    @PostMapping("/profiles")
     @ResponseStatus(HttpStatus.CREATED)
     fun addProfile(@RequestBody profileDTO: ProfileDTO?): ProfileDTO {
         if (profileDTO == null) throw NotValidException("Profile was malformed")
         return profileService.addProfile(profileDTO)
     }
 
-    @PutMapping("/API/profiles/{email}")
+    @PutMapping("/profiles/{email}")
     @ResponseStatus(HttpStatus.CREATED)
     fun editProfile(@RequestBody profileDTO: ProfileDTO?, @PathVariable email: String): ProfileDTO {
         if (profileDTO == null) throw NotFoundException("Profile not found")
Index: server/src/main/kotlin/it/polito/wa2/server/ticketing/tickets/TicketController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.ticketing.tickets\r\n\r\nimport it.polito.wa2.server.NotValidException\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.web.bind.annotation.*\r\n\r\n@RestController\r\nclass TicketController(\r\n    private val ticketService: TicketService\r\n) {\r\n\r\n    @GetMapping(\"API/tickets\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun getAll(): List<TicketDTO> {\r\n        return ticketService.getAll().map { it.toDTO() }\r\n    }\r\n\r\n    @GetMapping(\"API/tickets/{ticketId}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun getById(@PathVariable ticketId: Long): TicketDTO {\r\n        return ticketService.getById(ticketId).toDTO()\r\n    }\r\n\r\n    @PostMapping(\"API/tickets\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    fun createTicket(@RequestBody ticketDTO: TicketDTO?): TicketDTO {\r\n        if (ticketDTO == null) throw NotValidException(\"Ticket was malformed\")\r\n        return ticketService.createTicket(ticketDTO).toDTO()\r\n    }\r\n\r\n    @PostMapping(\"/API/tickets/{ticketId}/{stateString}\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    fun updateStatus(@PathVariable ticketId: Long, @PathVariable stateString: String): TicketDTO {\r\n        try {\r\n            val state = States.valueOf(stateString.uppercase())\r\n            return ticketService.updateStatus(ticketId, state).toDTO()\r\n        } catch (e: IllegalArgumentException) {\r\n            throw NotValidException(\"Invalid status\")\r\n        }\r\n    }\r\n\r\n    @PutMapping(\"API/tickets/{ticketId}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun editTicket(@PathVariable ticketId: Long, @RequestBody ticketDTO: TicketDTO?): TicketDTO {\r\n        if (ticketDTO == null) throw NotValidException(\"Ticket was malformed\")\r\n        if (ticketId != ticketDTO.id) throw NotValidException(\"Ticket id and path id doesn't match\")\r\n        return ticketService.editTicket(ticketId, ticketDTO).toDTO()\r\n    }\r\n\r\n    @DeleteMapping(\"API/tickets/{ticketId}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun deleteTicket(@PathVariable ticketId: Long): TicketDTO {\r\n        return ticketService.deleteTicket(ticketId).toDTO()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/kotlin/it/polito/wa2/server/ticketing/tickets/TicketController.kt b/server/src/main/kotlin/it/polito/wa2/server/ticketing/tickets/TicketController.kt
--- a/server/src/main/kotlin/it/polito/wa2/server/ticketing/tickets/TicketController.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/main/kotlin/it/polito/wa2/server/ticketing/tickets/TicketController.kt	(date 1684398366454)
@@ -9,13 +9,13 @@
     private val ticketService: TicketService
 ) {
 
-    @GetMapping("API/tickets")
+    @GetMapping("/tickets")
     @ResponseStatus(HttpStatus.OK)
     fun getAll(): List<TicketDTO> {
         return ticketService.getAll().map { it.toDTO() }
     }
 
-    @GetMapping("API/tickets/{ticketId}")
+    @GetMapping("/tickets/{ticketId}")
     @ResponseStatus(HttpStatus.OK)
     fun getById(@PathVariable ticketId: Long): TicketDTO {
         return ticketService.getById(ticketId).toDTO()
Index: server/src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>spring:\r\n  datasource:\r\n    url: jdbc:postgresql://localhost:5432/ticket_app\r\n    username: postgres\r\n    password: mysecretpassword\r\n  jpa:\r\n    show-sql: true\r\n    hibernate:\r\n      ddl-auto: validate\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/resources/application.yml b/server/src/main/resources/application.yml
--- a/server/src/main/resources/application.yml	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/main/resources/application.yml	(date 1684398366358)
@@ -7,3 +7,7 @@
     show-sql: true
     hibernate:
       ddl-auto: validate
+server:
+  port: 8081
+  servlet:
+    context-path: /api
\ No newline at end of file
Index: server/src/main/kotlin/it/polito/wa2/server/products/ProductController.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.products\r\n\r\nimport it.polito.wa2.server.NotValidException\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.web.bind.annotation.*\r\n\r\n@RestController\r\nclass ProductController(\r\n    private val productService: ProductService\r\n) {\r\n\r\n    @PostMapping(\"/API/products\")\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    fun addProduct(@RequestBody productDTO: ProductDTO?): ProductDTO {\r\n        if (productDTO == null) throw NotValidException(\"Product was malformed\")\r\n        return productService.addProduct(productDTO)\r\n    }\r\n\r\n    @GetMapping(\"/API/products\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun getAll(): List<ProductDTO> {\r\n        return productService.getAll()\r\n    }\r\n\r\n    @GetMapping(\"/API/products/{ean}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    fun getById(@PathVariable ean: String): ProductDTO? {\r\n        return productService.getById(ean)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/kotlin/it/polito/wa2/server/products/ProductController.kt b/server/src/main/kotlin/it/polito/wa2/server/products/ProductController.kt
--- a/server/src/main/kotlin/it/polito/wa2/server/products/ProductController.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/main/kotlin/it/polito/wa2/server/products/ProductController.kt	(date 1684398366416)
@@ -9,20 +9,20 @@
     private val productService: ProductService
 ) {
 
-    @PostMapping("/API/products")
+    @PostMapping("/products")
     @ResponseStatus(HttpStatus.CREATED)
     fun addProduct(@RequestBody productDTO: ProductDTO?): ProductDTO {
         if (productDTO == null) throw NotValidException("Product was malformed")
         return productService.addProduct(productDTO)
     }
 
-    @GetMapping("/API/products")
+    @GetMapping("/products")
     @ResponseStatus(HttpStatus.OK)
     fun getAll(): List<ProductDTO> {
         return productService.getAll()
     }
 
-    @GetMapping("/API/products/{ean}")
+    @GetMapping("/products/{ean}")
     @ResponseStatus(HttpStatus.OK)
     fun getById(@PathVariable ean: String): ProductDTO? {
         return productService.getById(ean)
Index: server/src/test/kotlin/it/polito/wa2/server/ticketing/MessagesTests.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.ticketing;\r\n\r\nimport it.polito.wa2.server.AbstractApplicationTest\r\nimport it.polito.wa2.server.products.ProductDTO\r\nimport it.polito.wa2.server.profiles.ProfileDTO\r\nimport it.polito.wa2.server.profiles.Roles\r\nimport it.polito.wa2.server.ticketing.messages.MessageDTO\r\nimport it.polito.wa2.server.ticketing.tickets.States\r\nimport it.polito.wa2.server.ticketing.tickets.TicketDTO\r\nimport org.junit.jupiter.api.Assertions\r\nimport org.junit.jupiter.api.Test\r\nimport org.springframework.boot.test.web.client.getForEntity\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.test.annotation.DirtiesContext\r\nimport java.sql.Timestamp\r\n\r\nclass MessagesTests : AbstractApplicationTest() {\r\n    fun createTicket(): TicketDTO {\r\n        val customerDTO = ProfileDTO(\"customer@email.com\", \"customer customer\", Roles.CUSTOMER, \"222222222\")\r\n        val technicianDTO = ProfileDTO(\"technician@email.com\", \"technician tech\", Roles.TECHNICIAN, \"333333333\")\r\n        val productDTO = ProductDTO(\"ean\", \"sku\", \"name\", \"brand\", \"category\", 1.0f)\r\n        val states = mutableListOf(States.OPEN)\r\n        val ticketDTO = TicketDTO(null, productDTO, customerDTO, technicianDTO, states, \"description\", 3, null)\r\n\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/profiles\", customerDTO)\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/profiles\", technicianDTO)\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/products\", productDTO)\r\n\r\n        val res = restTemplate.postForEntity(\"http://localhost:$port/API/tickets\", ticketDTO, TicketDTO::class.java)\r\n        Assertions.assertEquals(HttpStatus.CREATED, res.statusCode)\r\n        Assertions.assertNotNull(res.body)\r\n\r\n        val ticket = ticketDTO.copy(id = res.body?.id, messages = res.body?.messages)\r\n        Assertions.assertEquals(ticket, res.body)\r\n\r\n        return ticket\r\n    }\r\n\r\n    fun createMessage(): MessageDTO {\r\n        val ticket = createTicket()\r\n\r\n        val timestamp = Timestamp.valueOf(\"2023-05-20 12:23:50\")\r\n        val messageDTO = MessageDTO(null, ticket.id!!, true, timestamp, null, \"Test Message\")\r\n\r\n        val res = restTemplate.postForEntity(\r\n            \"http://localhost:$port/API/tickets/${ticket.id}/messages\",\r\n            messageDTO,\r\n            MessageDTO::class.java\r\n        )\r\n        Assertions.assertEquals(HttpStatus.CREATED, res.statusCode)\r\n        Assertions.assertNotNull(res.body)\r\n\r\n        val message = messageDTO.copy(id = res.body?.id)\r\n        Assertions.assertEquals(message, res.body)\r\n\r\n        return message\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test add message`() {\r\n        createMessage()\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test get message`() {\r\n        val messageDTO = createMessage()\r\n\r\n        val res = restTemplate.getForEntity(\r\n            \"http://localhost:$port/API/tickets/${messageDTO.ticket}/messages/${messageDTO.id}\",\r\n            MessageDTO::class.java\r\n        )\r\n        Assertions.assertEquals(HttpStatus.OK, res.statusCode)\r\n        Assertions.assertEquals(messageDTO, res.body)\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/test/kotlin/it/polito/wa2/server/ticketing/MessagesTests.kt b/server/src/test/kotlin/it/polito/wa2/server/ticketing/MessagesTests.kt
--- a/server/src/test/kotlin/it/polito/wa2/server/ticketing/MessagesTests.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/test/kotlin/it/polito/wa2/server/ticketing/MessagesTests.kt	(date 1684398366378)
@@ -22,11 +22,11 @@
         val states = mutableListOf(States.OPEN)
         val ticketDTO = TicketDTO(null, productDTO, customerDTO, technicianDTO, states, "description", 3, null)
 
-        restTemplate.postForLocation("http://localhost:$port/API/profiles", customerDTO)
-        restTemplate.postForLocation("http://localhost:$port/API/profiles", technicianDTO)
-        restTemplate.postForLocation("http://localhost:$port/API/products", productDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/profiles", customerDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/profiles", technicianDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/products", productDTO)
 
-        val res = restTemplate.postForEntity("http://localhost:$port/API/tickets", ticketDTO, TicketDTO::class.java)
+        val res = restTemplate.postForEntity("http://localhost:$port/api/tickets", ticketDTO, TicketDTO::class.java)
         Assertions.assertEquals(HttpStatus.CREATED, res.statusCode)
         Assertions.assertNotNull(res.body)
 
@@ -43,7 +43,7 @@
         val messageDTO = MessageDTO(null, ticket.id!!, true, timestamp, null, "Test Message")
 
         val res = restTemplate.postForEntity(
-            "http://localhost:$port/API/tickets/${ticket.id}/messages",
+            "http://localhost:$port/api/tickets/${ticket.id}/messages",
             messageDTO,
             MessageDTO::class.java
         )
@@ -68,7 +68,7 @@
         val messageDTO = createMessage()
 
         val res = restTemplate.getForEntity(
-            "http://localhost:$port/API/tickets/${messageDTO.ticket}/messages/${messageDTO.id}",
+            "http://localhost:$port/api/tickets/${messageDTO.ticket}/messages/${messageDTO.id}",
             MessageDTO::class.java
         )
         Assertions.assertEquals(HttpStatus.OK, res.statusCode)
Index: server/src/test/kotlin/it/polito/wa2/server/products/ProductsTests.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.products\r\n\r\nimport it.polito.wa2.server.AbstractApplicationTest\r\nimport org.junit.jupiter.api.Assertions\r\nimport org.junit.jupiter.api.Test\r\nimport org.springframework.core.ParameterizedTypeReference\r\nimport org.springframework.http.HttpMethod\r\nimport org.springframework.http.ResponseEntity\r\nimport org.springframework.test.annotation.DirtiesContext\r\n\r\nclass ProductsTests : AbstractApplicationTest() {\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test create product`() {\r\n        val productDTO = ProductDTO(\"ean\", \"sku\", \"name\", \"brand\", \"category\", 1.0f)\r\n\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/products\", productDTO)\r\n\r\n        val retrievedProduct =\r\n            restTemplate.getForObject(\"http://localhost:$port/API/products/ean\", ProductDTO::class.java)\r\n\r\n        Assertions.assertEquals(productDTO, retrievedProduct)\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test get all products`() {\r\n        val productDTO1 = ProductDTO(\"ean\", \"sku\", \"name\", \"brand\", \"category\", 1.0f)\r\n        val productDTO2 = ProductDTO(\"ean1\", \"sku\", \"name\", \"brand\", \"category\", 1.0f)\r\n        val productDTO3 = ProductDTO(\"ean2\", \"sku\", \"name\", \"brand\", \"category\", 1.0f)\r\n\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/products\", productDTO1)\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/products\", productDTO2)\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/products\", productDTO3)\r\n\r\n        val rateResponse: ResponseEntity<List<ProductDTO>> = restTemplate.exchange(\"http://localhost:$port/API/products\",\r\n            HttpMethod.GET, null, object : ParameterizedTypeReference<List<ProductDTO>>() {})\r\n        val rates: List<ProductDTO>? = rateResponse.body\r\n\r\n        if (rates != null) {\r\n            Assertions.assertEquals(rates.size, 3)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/test/kotlin/it/polito/wa2/server/products/ProductsTests.kt b/server/src/test/kotlin/it/polito/wa2/server/products/ProductsTests.kt
--- a/server/src/test/kotlin/it/polito/wa2/server/products/ProductsTests.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/test/kotlin/it/polito/wa2/server/products/ProductsTests.kt	(date 1684398366402)
@@ -14,10 +14,10 @@
     fun `test create product`() {
         val productDTO = ProductDTO("ean", "sku", "name", "brand", "category", 1.0f)
 
-        restTemplate.postForLocation("http://localhost:$port/API/products", productDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/products", productDTO)
 
         val retrievedProduct =
-            restTemplate.getForObject("http://localhost:$port/API/products/ean", ProductDTO::class.java)
+            restTemplate.getForObject("http://localhost:$port/api/products/ean", ProductDTO::class.java)
 
         Assertions.assertEquals(productDTO, retrievedProduct)
     }
@@ -29,11 +29,11 @@
         val productDTO2 = ProductDTO("ean1", "sku", "name", "brand", "category", 1.0f)
         val productDTO3 = ProductDTO("ean2", "sku", "name", "brand", "category", 1.0f)
 
-        restTemplate.postForLocation("http://localhost:$port/API/products", productDTO1)
-        restTemplate.postForLocation("http://localhost:$port/API/products", productDTO2)
-        restTemplate.postForLocation("http://localhost:$port/API/products", productDTO3)
+        restTemplate.postForLocation("http://localhost:$port/api/products", productDTO1)
+        restTemplate.postForLocation("http://localhost:$port/api/products", productDTO2)
+        restTemplate.postForLocation("http://localhost:$port/api/products", productDTO3)
 
-        val rateResponse: ResponseEntity<List<ProductDTO>> = restTemplate.exchange("http://localhost:$port/API/products",
+        val rateResponse: ResponseEntity<List<ProductDTO>> = restTemplate.exchange("http://localhost:$port/api/products",
             HttpMethod.GET, null, object : ParameterizedTypeReference<List<ProductDTO>>() {})
         val rates: List<ProductDTO>? = rateResponse.body
 
Index: server/src/test/kotlin/it/polito/wa2/server/profiles/ProfilesTests.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.profiles\r\n\r\nimport it.polito.wa2.server.AbstractApplicationTest\r\nimport org.junit.jupiter.api.Assertions\r\nimport org.junit.jupiter.api.Test\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.test.annotation.DirtiesContext\r\n\r\nclass ProfilesTests : AbstractApplicationTest() {\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test create profile`() {\r\n        val profileDTO = ProfileDTO(\"test@email.com\", \"Test Test\", Roles.TECHNICIAN, \"333333333\")\r\n\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/profiles\", profileDTO)\r\n\r\n        val retrievedProfile =\r\n            restTemplate.getForObject(\"http://localhost:$port/API/profiles/test@email.com\", ProfileDTO::class.java)\r\n\r\n        Assertions.assertEquals(profileDTO, retrievedProfile)\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test edit profile`() {\r\n        val profileDTO = ProfileDTO(\"test@email.com\", \"Test Test\", Roles.TECHNICIAN, \"333333333\")\r\n        val newProfileDTO = ProfileDTO(\"test@email.com\", \"Testing Testing\", Roles.CUSTOMER, \"222222222\")\r\n\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/profiles\", profileDTO)\r\n        restTemplate.put(\"http://localhost:$port/API/profiles/test@email.com\", newProfileDTO)\r\n\r\n        val retrievedProfile =\r\n            restTemplate.getForObject(\"http://localhost:$port/API/profiles/test@email.com\", ProfileDTO::class.java)\r\n        Assertions.assertEquals(newProfileDTO, retrievedProfile)\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test create already existing profile`() {\r\n        val profileDTO = ProfileDTO(\"test@email.com\", \"Test Test\", Roles.TECHNICIAN, \"333333333\")\r\n        val newProfileDTO = ProfileDTO(\"test@email.com\", \"Mario Rossi\", Roles.CUSTOMER, \"666\")\r\n\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/profiles\", profileDTO)\r\n        val res = restTemplate.postForEntity(\"http://localhost:$port/API/profiles\", newProfileDTO, String::class.java)\r\n\r\n        Assertions.assertEquals(HttpStatus.CONFLICT, res.statusCode)\r\n        Assertions.assertEquals(true, res.body?.contains(\"User already exists\"))\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/test/kotlin/it/polito/wa2/server/profiles/ProfilesTests.kt b/server/src/test/kotlin/it/polito/wa2/server/profiles/ProfilesTests.kt
--- a/server/src/test/kotlin/it/polito/wa2/server/profiles/ProfilesTests.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/test/kotlin/it/polito/wa2/server/profiles/ProfilesTests.kt	(date 1684398366441)
@@ -12,10 +12,10 @@
     fun `test create profile`() {
         val profileDTO = ProfileDTO("test@email.com", "Test Test", Roles.TECHNICIAN, "333333333")
 
-        restTemplate.postForLocation("http://localhost:$port/API/profiles", profileDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/profiles", profileDTO)
 
         val retrievedProfile =
-            restTemplate.getForObject("http://localhost:$port/API/profiles/test@email.com", ProfileDTO::class.java)
+            restTemplate.getForObject("http://localhost:$port/api/profiles/test@email.com", ProfileDTO::class.java)
 
         Assertions.assertEquals(profileDTO, retrievedProfile)
     }
@@ -26,11 +26,11 @@
         val profileDTO = ProfileDTO("test@email.com", "Test Test", Roles.TECHNICIAN, "333333333")
         val newProfileDTO = ProfileDTO("test@email.com", "Testing Testing", Roles.CUSTOMER, "222222222")
 
-        restTemplate.postForLocation("http://localhost:$port/API/profiles", profileDTO)
-        restTemplate.put("http://localhost:$port/API/profiles/test@email.com", newProfileDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/profiles", profileDTO)
+        restTemplate.put("http://localhost:$port/api/profiles/test@email.com", newProfileDTO)
 
         val retrievedProfile =
-            restTemplate.getForObject("http://localhost:$port/API/profiles/test@email.com", ProfileDTO::class.java)
+            restTemplate.getForObject("http://localhost:$port/api/profiles/test@email.com", ProfileDTO::class.java)
         Assertions.assertEquals(newProfileDTO, retrievedProfile)
     }
 
@@ -40,8 +40,8 @@
         val profileDTO = ProfileDTO("test@email.com", "Test Test", Roles.TECHNICIAN, "333333333")
         val newProfileDTO = ProfileDTO("test@email.com", "Mario Rossi", Roles.CUSTOMER, "666")
 
-        restTemplate.postForLocation("http://localhost:$port/API/profiles", profileDTO)
-        val res = restTemplate.postForEntity("http://localhost:$port/API/profiles", newProfileDTO, String::class.java)
+        restTemplate.postForLocation("http://localhost:$port/api/profiles", profileDTO)
+        val res = restTemplate.postForEntity("http://localhost:$port/api/profiles", newProfileDTO, String::class.java)
 
         Assertions.assertEquals(HttpStatus.CONFLICT, res.statusCode)
         Assertions.assertEquals(true, res.body?.contains("User already exists"))
Index: server/src/test/kotlin/it/polito/wa2/server/ticketing/TicketsTests.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.polito.wa2.server.ticketing\r\n\r\nimport it.polito.wa2.server.AbstractApplicationTest\r\nimport it.polito.wa2.server.products.ProductDTO\r\nimport it.polito.wa2.server.profiles.ProfileDTO\r\nimport it.polito.wa2.server.profiles.Roles\r\nimport it.polito.wa2.server.ticketing.tickets.States\r\nimport it.polito.wa2.server.ticketing.tickets.TicketDTO\r\nimport org.junit.jupiter.api.Assertions\r\nimport org.junit.jupiter.api.Test\r\nimport org.springframework.boot.test.web.client.exchange\r\nimport org.springframework.http.HttpEntity\r\nimport org.springframework.http.HttpMethod\r\nimport org.springframework.http.HttpStatus\r\nimport org.springframework.test.annotation.DirtiesContext\r\n\r\nclass TicketsTests : AbstractApplicationTest() {\r\n    fun createTicket(): TicketDTO {\r\n        val customerDTO = ProfileDTO(\"customer@email.com\", \"customer customer\", Roles.CUSTOMER, \"222222222\")\r\n        val technicianDTO = ProfileDTO(\"technician@email.com\", \"technician tech\", Roles.TECHNICIAN, \"333333333\")\r\n        val productDTO = ProductDTO(\"ean\", \"sku\", \"name\", \"brand\", \"category\", 1.0f)\r\n        val states = mutableListOf(States.OPEN)\r\n        val ticketDTO = TicketDTO(null, productDTO, customerDTO, technicianDTO, states, \"description\", 3, null)\r\n\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/profiles\", customerDTO)\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/profiles\", technicianDTO)\r\n        restTemplate.postForLocation(\"http://localhost:$port/API/products\", productDTO)\r\n\r\n        val res = restTemplate.postForEntity(\"http://localhost:$port/API/tickets\", ticketDTO, TicketDTO::class.java)\r\n        Assertions.assertEquals(HttpStatus.CREATED, res.statusCode)\r\n        Assertions.assertNotNull(res.body)\r\n\r\n        val ticket = ticketDTO.copy(id = res.body?.id, messages = res.body?.messages)\r\n        Assertions.assertEquals(ticket, res.body)\r\n\r\n        return ticket\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test create ticket`() {\r\n        createTicket()\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test get ticket by id`() {\r\n        val ticket = createTicket()\r\n\r\n        val res = restTemplate.getForEntity(\"http://localhost:$port/API/tickets/${ticket.id}\", TicketDTO::class.java)\r\n        Assertions.assertEquals(HttpStatus.OK, res.statusCode)\r\n        Assertions.assertEquals(ticket, res.body)\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test edit ticket`() {\r\n        val ticket = createTicket().copy(priority = 0)\r\n\r\n\r\n\r\n        val res = restTemplate.exchange(\r\n            \"http://localhost:$port/API/tickets/${ticket.id}\",\r\n            HttpMethod.PUT,\r\n            HttpEntity(ticket),\r\n            TicketDTO::class.java\r\n        )\r\n\r\n        Assertions.assertEquals(HttpStatus.OK, res.statusCode)\r\n        Assertions.assertEquals(ticket, res.body)\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test delete ticket`() {\r\n        val ticket = createTicket()\r\n\r\n        val res = restTemplate.exchange(\r\n            \"http://localhost:$port/API/tickets/${ticket.id}\",\r\n            HttpMethod.DELETE,\r\n            null,\r\n            TicketDTO::class.java\r\n        )\r\n\r\n        Assertions.assertEquals(HttpStatus.OK, res.statusCode)\r\n        Assertions.assertEquals(ticket, res.body)\r\n    }\r\n\r\n    @Test\r\n    @DirtiesContext(methodMode = DirtiesContext.MethodMode.BEFORE_METHOD)\r\n    fun `test add status for ticket`() {\r\n        val ticket = createTicket()\r\n        val state = States.IN_PROGRESS\r\n\r\n        val res = restTemplate.postForEntity(\r\n            \"http://localhost:$port/API/tickets/${ticket.id}/${state}\",\r\n            null,\r\n            TicketDTO::class.java\r\n        )\r\n        Assertions.assertEquals(HttpStatus.CREATED, res.statusCode)\r\n        Assertions.assertNotNull(res.body)\r\n\r\n        ticket.statuses.add(state)\r\n        Assertions.assertEquals(ticket, res.body)\r\n\r\n\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/test/kotlin/it/polito/wa2/server/ticketing/TicketsTests.kt b/server/src/test/kotlin/it/polito/wa2/server/ticketing/TicketsTests.kt
--- a/server/src/test/kotlin/it/polito/wa2/server/ticketing/TicketsTests.kt	(revision 9579465c986c3fe556c739501e0ab1ab6f98a425)
+++ b/server/src/test/kotlin/it/polito/wa2/server/ticketing/TicketsTests.kt	(date 1684398384491)
@@ -22,11 +22,11 @@
         val states = mutableListOf(States.OPEN)
         val ticketDTO = TicketDTO(null, productDTO, customerDTO, technicianDTO, states, "description", 3, null)
 
-        restTemplate.postForLocation("http://localhost:$port/API/profiles", customerDTO)
-        restTemplate.postForLocation("http://localhost:$port/API/profiles", technicianDTO)
-        restTemplate.postForLocation("http://localhost:$port/API/products", productDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/profiles", customerDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/profiles", technicianDTO)
+        restTemplate.postForLocation("http://localhost:$port/api/products", productDTO)
 
-        val res = restTemplate.postForEntity("http://localhost:$port/API/tickets", ticketDTO, TicketDTO::class.java)
+        val res = restTemplate.postForEntity("http://localhost:$port/api/tickets", ticketDTO, TicketDTO::class.java)
         Assertions.assertEquals(HttpStatus.CREATED, res.statusCode)
         Assertions.assertNotNull(res.body)
 
@@ -47,7 +47,7 @@
     fun `test get ticket by id`() {
         val ticket = createTicket()
 
-        val res = restTemplate.getForEntity("http://localhost:$port/API/tickets/${ticket.id}", TicketDTO::class.java)
+        val res = restTemplate.getForEntity("http://localhost:$port/api/tickets/${ticket.id}", TicketDTO::class.java)
         Assertions.assertEquals(HttpStatus.OK, res.statusCode)
         Assertions.assertEquals(ticket, res.body)
     }
@@ -60,7 +60,7 @@
 
 
         val res = restTemplate.exchange(
-            "http://localhost:$port/API/tickets/${ticket.id}",
+            "http://localhost:$port/api/tickets/${ticket.id}",
             HttpMethod.PUT,
             HttpEntity(ticket),
             TicketDTO::class.java
@@ -76,7 +76,7 @@
         val ticket = createTicket()
 
         val res = restTemplate.exchange(
-            "http://localhost:$port/API/tickets/${ticket.id}",
+            "http://localhost:$port/api/tickets/${ticket.id}",
             HttpMethod.DELETE,
             null,
             TicketDTO::class.java
@@ -93,7 +93,7 @@
         val state = States.IN_PROGRESS
 
         val res = restTemplate.postForEntity(
-            "http://localhost:$port/API/tickets/${ticket.id}/${state}",
+            "http://localhost:$port/api/tickets/${ticket.id}/${state}",
             null,
             TicketDTO::class.java
         )
Index: server/src/main/kotlin/it/polito/wa2/server/authentication/AuthenticationConfiguration.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/server/src/main/kotlin/it/polito/wa2/server/authentication/AuthenticationConfiguration.kt b/server/src/main/kotlin/it/polito/wa2/server/authentication/AuthenticationConfiguration.kt
new file mode 100644
--- /dev/null	(date 1684397163488)
+++ b/server/src/main/kotlin/it/polito/wa2/server/authentication/AuthenticationConfiguration.kt	(date 1684397163488)
@@ -0,0 +1,34 @@
+package it.polito.wa2.server.authentication
+
+import org.springframework.context.annotation.Bean
+import org.springframework.context.annotation.Configuration
+import org.springframework.security.core.userdetails.User
+import org.springframework.security.core.userdetails.UserDetailsService
+import org.springframework.security.crypto.factory.PasswordEncoderFactories
+import org.springframework.security.crypto.password.DelegatingPasswordEncoder
+import org.springframework.security.crypto.password.PasswordEncoder
+import org.springframework.security.provisioning.InMemoryUserDetailsManager
+
+@Configuration
+class AuthenticationConfiguration {
+
+    @Bean
+    fun userDetails(passwordEncoder: PasswordEncoder): UserDetailsService {
+        val u1 = User
+            .withUsername("u1")
+            .password(passwordEncoder.encode("p1"))
+            .authorities("ROLE_CUSTOMER")
+            .build()
+
+        val u2 = User
+            .withUsername("u2")
+            .password(passwordEncoder.encode("p2"))
+            .authorities("ROLE_CUSTOMER", "ROLE_ADMIN")
+            .build()
+
+        return InMemoryUserDetailsManager(u1, u2)
+    }
+
+    @Bean
+    fun passwordEncoder(): PasswordEncoder = PasswordEncoderFactories.createDelegatingPasswordEncoder()
+}
\ No newline at end of file
